#!/usr/bin/perl
# HTTP fingerprinting tool

use strict;
use warnings;
use Getopt::Long;
use lib './lib';
use lbmap::lbmap;
use Data::Dumper;

my $VERSION = '0.1';
my $AUTHOR = 'Eldar "Wireghoul" Marcussen';
my $debug = 0;
my $timeout = 30;
my $opts = GetOptions(
	'debug' => \$debug,
	'timeout' => \$timeout,
	'version' => sub { print "lbmap version: $VERSION\n"; exit 0; }
);
my @uris;

if (! $ARGV[0]) {
    &show_help;
} elsif ($ARGV[0] eq '-') {
    @uris = <STDIN>;
} elsif ( -e $ARGV[0] ) {
	 open (URIS, $ARGV[0]);
	 while (<URIS>) {
		chomp;
		my $uri = $_;
		if ($uri !~ /^http/) {
			$uri = 'http://' . $uri;
		}
		push @uris, $uri;
	 }
	 close (URIS); 
} else {
	my $uri = $ARGV[0];
	if ($uri !~ /^http/) {
		$uri = 'http://' . $uri;
	}
    push @uris, $uri;
}
chomp(@uris);
for my $uri (@uris) {
    my $lbmap = lbmap::lbmap->new('debug' => $debug, 'timeout' => $timeout);
    &banner($uri);
    my %result = $lbmap->scan($uri);
    print Dumper(%result);
}

sub show_help {
    print "Usage $0 <options> target\n";
    print "Valid options:\n\t--debug\tprints debug information\n\t--timeout\tsets timeout in seconds (defult: 30)\n\t--version\tprints the lbmap version\n";
    print "Valid target is a single uri (http://example.com), a file (targets.txt) or - to read targets from STDIN\n";
    exit;
}

sub banner {
    my $target = shift;
    print "lbmap - http fingerprinting tool\n";
    print "$AUTHOR - Scanning $target\n";
}
